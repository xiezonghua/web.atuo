<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
#set($mapType="${packageName}.bo.${Name}")
#set($columnNames="")
#set($inputColumnNames="")
#set($generatedInfo = "<!-- 
	  WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on ${now}.
    -->")

#foreach( $elem in ${PropertyList})
	#if($columnNames == "")
		#set($columnNames="$elem.columnName")
		#set($inputColumnNames = "#{${elem.columnNameCamel} ,jdbcType= $javaMatchUtils.sqlTypeToJDBC($elem.dataType)}")
	#else
		#set($columnNames="$columnNames, ${elem.columnName}")
		#set($inputColumnNames = "$inputColumnNames , #{${elem.columnNameCamel} ,jdbcType= $javaMatchUtils.sqlTypeToJDBC($elem.dataType)}") 
	#end
#end

<mapper namespace="${packageName}.dao.${Name}Mapper">
	<resultMap id="BaseResultMap" type="$mapType">
	${generatedInfo}

	#foreach( $elem in ${PropertyList})
		#if($elem.columnKey == "PRI")
		<id column="${elem.columnName}" property="${elem.columnNameCamel}" jdbcType="$javaMatchUtils.sqlTypeToJDBC($elem.dataType)" />
		#set($primaryKey = $elem)
		#else
		<result column="${elem.columnName}" property="${elem.columnNameCamel}" jdbcType="$javaMatchUtils.sqlTypeToJDBC($elem.dataType)" />
		#end
	#end
	</resultMap>


  <sql id="Base_Column_List">
	${generatedInfo}
	$columnNames 
  </sql>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
    ${generatedInfo}
	
    select 
    <include refid="Base_Column_List" />
    from ${tableName}
    where $primaryKey.columnName = #{$primaryKey.columnName,jdbcType=$javaMatchUtils.sqlTypeToJDBC($primaryKey.dataType)}
  </select>
  
  <select id="selectAll" resultMap="BaseResultMap">
    ${generatedInfo}
	
    select 
    <include refid="Base_Column_List" />
    from ${tableName}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
	${generatedInfo}
   
    delete from ${tableName}
    where $primaryKey.columnName = #{${primaryKey.columnNameCamel},jdbcType=$javaMatchUtils.sqlTypeToJDBC($primaryKey.dataType)}
  </delete>
  
  <insert id="insert" parameterType="${packageName}.bo.${Name}" useGeneratedKeys="true" keyProperty="${primaryKey.columnNameCamel}">
	${generatedInfo}
    <![CDATA[
    insert into tb_user (
    	$columnNames 
	)
    values (
    	$inputColumnNames
    ]]>
	
  </insert>
  
  <insert id="insertSelective" parameterType="$mapType" useGeneratedKeys="true" keyProperty="${primaryKey.columnNameCamel}">
	${generatedInfo}
    
	insert into ${tableName}
    <trim prefix="(" suffix=")" suffixOverrides=",">
#foreach( $elem in ${PropertyList})
		<if test="$elem.columnNameCamel != null">
			$elem.columnName ,
		</if>
#end
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
#foreach( $elem in ${PropertyList})
		<if test="$elem.columnNameCamel != null">
			#{${elem.columnNameCamel} ,jdbcType= $javaMatchUtils.sqlTypeToJDBC($elem.dataType)} ,
		</if>
#end
    </trim>
  </insert>
  
  <select id="count" resultType="java.lang.Long">
	${generatedInfo}
	
    select count(*) from ${tableName}
  </select>
  
  <update id="updateByPrimaryKeySelective" parameterType="$mapType">
    ${generatedInfo}
	
    update ${tableName}
    <set>
	#foreach( $elem in ${PropertyList})
		<if test="$elem.columnNameCamel != null">
			$elem.columnName = #{${elem.columnNameCamel} ,jdbcType= $javaMatchUtils.sqlTypeToJDBC($elem.dataType)} ,
		</if>
       #end
	</set>
    where $primaryKey.columnName = #{${primaryKey.columnNameCamel},jdbcType=$javaMatchUtils.sqlTypeToJDBC($primaryKey.dataType)}
  </update>
  
  <update id="updateByPrimaryKey" parameterType="$mapType">
   ${generatedInfo}
   
    update ${tableName}
	<trim prefix="set"  suffixOverrides=",">
	#foreach( $elem in ${PropertyList})
		$elem.columnName = #{${elem.columnNameCamel} ,jdbcType= $javaMatchUtils.sqlTypeToJDBC($elem.dataType)} ,
	#end
	</trim>
    where $primaryKey.columnName = #{${primaryKey.columnNameCamel},jdbcType=$javaMatchUtils.sqlTypeToJDBC($primaryKey.dataType)}
  </update>
</mapper>